package ua.com.doublekey.chat.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ua.com.doublekey.chat.model.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE".
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sender = new Property(1, String.class, "sender", false, "SENDER");
        public final static Property Receiver = new Property(2, String.class, "receiver", false, "RECEIVER");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property DateTime = new Property(4, long.class, "dateTime", false, "DATE_TIME");
        public final static Property IsMine = new Property(5, boolean.class, "isMine", false, "IS_MINE");
    }


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SENDER\" TEXT," + // 1: sender
                "\"RECEIVER\" TEXT," + // 2: receiver
                "\"MESSAGE\" TEXT," + // 3: message
                "\"DATE_TIME\" INTEGER NOT NULL ," + // 4: dateTime
                "\"IS_MINE\" INTEGER NOT NULL );"); // 5: isMine
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(2, sender);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(3, receiver);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getDateTime());
        stmt.bindLong(6, entity.getIsMine() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(2, sender);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(3, receiver);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getDateTime());
        stmt.bindLong(6, entity.getIsMine() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sender
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiver
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.getLong(offset + 4), // dateTime
            cursor.getShort(offset + 5) != 0 // isMine
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSender(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiver(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateTime(cursor.getLong(offset + 4));
        entity.setIsMine(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
